const CA = (
     0.46172939286012092817954516381760016,
     0.45017399588550288560580364647352070,
    -0.01091284195229295374494914320402658,
     0.00059324547127243642952756961712713,
    -0.00004479593219280756178998757870776,
     0.00000405154578580684540984293800468,
    -0.00000041095398606214457668547736075,
     0.00000004513178770934181970313262557,
    -0.00000000525466158515342604029419927,
     0.00000000063982547910449452549291936,
    -0.00000000008071938839872532971820424,
     0.00000000001048073680087126094928657,
    -0.00000000000139365085138335067524094,
     0.00000000000018907205037339730044704,
    -0.00000000000002609371657183250621931,
     0.00000000000000365481859219879483309,
    -0.00000000000000051855842492271228151,
     0.00000000000000007441491722173878908,
    -0.00000000000000001078686838424874221,
     0.00000000000000000157774237809543778,
    -0.00000000000000000023264073800573828,
     0.00000000000000000003455457587964154,
    -0.00000000000000000000516658458392580,
     0.00000000000000000000077718849383139,
    -0.00000000000000000000011755815708807,
     0.00000000000000000000001787262690583,
    -0.00000000000000000000000272999302683,
     0.00000000000000000000000041881267359,
    -0.00000000000000000000000006451004176,
     0.00000000000000000000000000997383916,
    -0.00000000000000000000000000154744603,
     0.00000000000000000000000000024087296,
    -0.00000000000000000000000000003760889,
     0.00000000000000000000000000000588900,
    -0.00000000000000000000000000000092463,
     0.00000000000000000000000000000014555,
    -0.00000000000000000000000000000002297,
     0.00000000000000000000000000000000363,
    -0.00000000000000000000000000000000058,
     0.00000000000000000000000000000000009,
    -0.00000000000000000000000000000000001
)

const CB = (
    -0.01601618044919582873670691984756338,
    -0.50364244007530129181209541016960792,
    -0.01615099243050025888745446951929454,
    -0.00124402421042449361265610524413112,
    -0.00013757218124461673921971996409271,
    -0.00001856381852603773316486795183129,
    -0.00000284173534515440415934505790039,
    -0.00000047459967905789937221638951390,
    -0.00000008448038543781200676091819474,
    -0.00000001578767124043400543246870475,
    -0.00000000306576207139903798128889004,
    -0.00000000061407921728125845808062189,
    -0.00000000012618830243156719690872484,
    -0.00000000002649314179819609957126783,
    -0.00000000000566470854636425926158812,
    -0.00000000000123041115779581117517467,
    -0.00000000000027093457836786768143960,
    -0.00000000000006038026463383701279197,
    -0.00000000000001360008993995749682352,
    -0.00000000000000309244740631856875855,
    -0.00000000000000070917249609207158220,
    -0.00000000000000016388083639226002471,
    -0.00000000000000003813464350168994613,
    -0.00000000000000000893010739611811656,
    -0.00000000000000000210331341599359416,
    -0.00000000000000000049802988416537866,
    -0.00000000000000000011850292695597351,
    -0.00000000000000000002832460494402074,
    -0.00000000000000000000679854955943073,
    -0.00000000000000000000163816629435900,
    -0.00000000000000000000039616291258646,
    -0.00000000000000000000009613022139972,
    -0.00000000000000000000002340035706102,
    -0.00000000000000000000000571315840877,
    -0.00000000000000000000000139876183805,
    -0.00000000000000000000000034336361321,
    -0.00000000000000000000000008449733573,
    -0.00000000000000000000000002084253881,
    -0.00000000000000000000000000515255292,
    -0.00000000000000000000000000127646290,
    -0.00000000000000000000000000031685555,
    -0.00000000000000000000000000007880228,
    -0.00000000000000000000000000001963363,
    -0.00000000000000000000000000000490016,
    -0.00000000000000000000000000000122499,
    -0.00000000000000000000000000000030671,
    -0.00000000000000000000000000000007691,
    -0.00000000000000000000000000000001931,
    -0.00000000000000000000000000000000486,
    -0.00000000000000000000000000000000122,
    -0.00000000000000000000000000000000031,
    -0.00000000000000000000000000000000008,
    -0.00000000000000000000000000000000002
)

"""
    li3(z::Float64)::Float64

Returns the real trilogarithm of a real number `z` of type `Float64`.

Author: Alexander Voigt

License: MIT

# Example
```julia
li3(1.0)
```
"""
function li3(x::Float64)::Float64
    z2::Float64 = 1.6449340668482264
    z3::Float64 = 1.2020569031595943

    # transformation y in [-1,0] and z in [0,1/2]
    if x < -1.0
        y = inv(x);
        z = 0.0
        s = -1.0
        r = -log(-x)*(z2 + 1/6*log(-x)^2)
    elseif x == -1.0
        return -0.75*z3 # todo: necessary?
    elseif x < 0.0
        y = x
        z = 0.0
        s = -1.0
        r = 0.0
    elseif x == 0.0
        return 0.0 # todo: necessary?
    elseif x < 0.5
        y = 0.0
        z = x
        s = -1.0
        r = 0.0
    elseif x == 0.5
        return 0.53721319360804020 # todo necessary?
    elseif x < 1.0
        y = (x - 1.0)/x
        z = 1.0 - x
        s = 1.0
        r = z3 + z2*log(x) - 0.5*log(1.0 - x)*log(x)^2 + 1/6*log(x)^3 # todo
    elseif x == 1.0
        return z3 # todo: necessary?
    elseif x < 2.0
        y = 1.0 - x
        z = (x - 1.0)/x
        s = 1.0
        r = z3 + z2*log(x) - 0.5*log(x - 1.0)*log(x)^2 + 1/6*log(x)^3 # todo
    else # x >= 2.0
        y = 0.0
        z = inv(x)
        s = -1.0
        r = 2*z2*log(x) - 1/6*log(x)^3 # todo
    end

    if !(-1.0 <= y && y <= 0.0 && 0 <= z && z <= 0.5)
        throw(DomainError("y and z out of bounds"))
    end

    println("y = $(y), z = $(z)")

    HA = -2.0*y - 1.0 ; HB = 2.0*z
    ALFAA = HA + HA ; ALFAB = HB + HB

    BA0 = 0.0; BA1 = 0.0; BA2 = 0.0
    BB0 = 0.0; BB1 = 0.0; BB2 = 0.0

    for I in length(CA):-1:1
       BA0 = CA[I] + ALFAA*BA1 - BA2 ; BA2 = BA1 ; BA1 = BA0
       BB0 = CB[I] + ALFAB*BB1 - BB2 ; BB2 = BB1 ; BB1 = BB0
    end

    r + s * ( (BA0 - HA*BA2) + (BB0 - HB*BB2) )
end

"""
    li3(z::ComplexF64)::ComplexF64

Returns the complex trilogarithm of a complex number `z` of type `ComplexF64`.

Author: Alexander Voigt

License: MIT

# Example
```julia
li3(1.0 + 1.0im)
```
"""
function li3(z::ComplexF64)::ComplexF64
    function clog(z)
        az::Float64 = angle(z)
        return 0.5*log(abs2(z)) + (imag(z) == 0.0 && az < 0.0 ? -az : az)*1.0im
    end

    z2::Float64 = 1.6449340668482264
    z3::Float64 = 1.2020569031595943
    bf = (
        1.0, -3.0/8.0, 17.0/216.0, -5.0/576.0,
        1.2962962962962963e-04,  8.1018518518518519e-05,
       -3.4193571608537595e-06, -1.3286564625850340e-06,
        8.6608717561098513e-08,  2.5260875955320400e-08,
       -2.1446944683640648e-09, -5.1401106220129789e-10,
        5.2495821146008294e-11,  1.0887754406636318e-11,
       -1.2779396094493695e-12, -2.3698241773087452e-13,
        3.1043578879654623e-14,  5.2617586299125061e-15
    )

    if imag(z) == 0.0
        if real(z) == 0.0
            return 0.0 + 0.0im
        end
        if real(z) == 1.0
            return z3 + 0.0im
        end
        if real(z) == -1.0
            return -0.75*z3 + 0.0im
        end
        if real(z) == 0.5
            return 0.53721319360804020 + 0.0im
        end
    end

    nz::Float64  = abs2(z)
    pz::Float64  = angle(z)
    lnz::Float64 = 0.5*log(nz)

    if lnz*lnz + pz*pz < 1.0 # |log(z)| < 1
        v::ComplexF64  = lnz + pz*im
        v2::ComplexF64 = v*v
        v4::ComplexF64 = v2*v2
        v8::ComplexF64 = v4*v4
        c0::ComplexF64 = z3 + v*(z2 - v2/12.0)
        c1::ComplexF64 = 0.25 * (3.0 - 2.0*clog(-v))

        cs = (
            -3.4722222222222222e-03, 1.1574074074074074e-05,
            -9.8418997228521038e-08, 1.1482216343327454e-09,
            -1.5815724990809166e-11, 2.4195009792525152e-13,
            -3.9828977769894877e-15
        )

        return c0 +
            c1*v2 +
            v4*(cs[1] + v2*cs[2]) +
            v8*(cs[3] + v2*cs[4] + v4*(cs[5] + v2*cs[6])) +
            v8*v8*cs[7]
    end

    (u::ComplexF64, rest::ComplexF64) = if nz <= 1.0
        (-clog(1.0 - z), 0.0 + 0.0im)
    else # nz > 1.0
        arg::Float64 = pz > 0.0 ? pz - pi : pz + pi
        lmz::ComplexF64 = lnz + arg*im # clog(z)
        (-clog(1.0 - 1.0/z), -lmz*(lmz*lmz/6.0 + z2))
    end

    u2::ComplexF64 = u*u
    u4::ComplexF64 = u2*u2
    u8::ComplexF64 = u4*u4

    rest +
    u*bf[1] +
    u2*(bf[2] + u*bf[3]) +
    u4*(bf[4] + u*bf[5] + u2*(bf[6] + u*bf[7])) +
    u8*(bf[8] + u*bf[9] + u2*(bf[10] + u*bf[11]) +
        u4*(bf[12] + u*bf[13] + u2*(bf[14] + u*bf[15]))) +
    u8*u8*(bf[16] + u*bf[17] + u2*bf[18])
end
