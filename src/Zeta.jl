# zeta(n) for n = 2,...,33
const ZETA_POS = (
    zeta2, zeta3, zeta4, zeta5, zeta6,
    1.0083492773819228, 1.0040773561979443, 1.0020083928260822,
    1.0009945751278181, 1.0004941886041195, 1.0002460865533080,
    1.0001227133475785, 1.0000612481350587, 1.0000305882363070,
    1.0000152822594087, 1.0000076371976379, 1.0000038172932650,
    1.0000019082127166, 1.0000009539620339, 1.0000004769329868,
    1.0000002384505027, 1.0000001192199260, 1.0000000596081891,
    1.0000000298035035, 1.0000000149015548, 1.0000000074507118,
    1.0000000037253340, 1.0000000018626597, 1.0000000009313274,
    1.0000000004656629, 1.0000000002328312, 1.0000000001164155
)

# zeta(1 - 2n) for n = 1,...,130, i.e. zeta(-1), zeta(-3), zeta(-5), ...
const ZETA_NEG = (
   -8.3333333333333333e-02,  8.3333333333333333e-03, -3.9682539682539683e-03,
    4.1666666666666667e-03, -7.5757575757575758e-03,  2.1092796092796093e-02,
   -8.3333333333333333e-02,  4.4325980392156863e-01, -3.0539543302701197e000,
    2.6456212121212121e001, -2.8146014492753623e002,  3.6075105463980464e003,
   -5.4827583333333333e004,  9.7493682385057471e005, -2.0052695796688079e007,
    4.7238486772162990e008, -1.2635724795916667e010,  3.8087931125245369e011,
   -1.2850850499305083e013,  4.8241448354850170e014, -2.0040310656516253e016,
    9.1677436031953308e017, -4.5979888343656503e019,  2.5180471921451096e021,
   -1.5001733492153929e023,  9.6899578874635941e024, -6.7645882379292821e026,
    5.0890659468662290e028, -4.1147288792557979e030,  3.5666582095375556e032,
   -3.3066089876577577e034,  3.2715634236478716e036, -3.4473782558278054e038,
    3.8614279832705259e040, -4.5892974432454332e042,  5.7775386342770432e044,
   -7.6919858759507135e046,  1.0813635449971655e049, -1.6029364522008965e051,
    2.5019479041560463e053, -4.1067052335810212e055,  7.0798774408494581e057,
   -1.2804546887939509e060,  2.4267340392333524e062, -4.8143218874045769e064,
    9.9875574175727531e066, -2.1645634868435186e069,  4.8962327039620553e071,
   -1.1549023923963520e074,  2.8382249570693707e076, -7.2612008803606716e078,
    1.9323514233419812e081, -5.3450160425288624e083,  1.5356028846422423e086,
   -4.5789872682265798e088,  1.4162025212194809e091, -4.5400652296092655e093,
    1.5076656758807860e096, -5.1830949148264564e098,  1.8435647427256529e101,
   -6.7805554753090959e103,  2.5773326702754605e106, -1.0119112875704598e109,
    4.1016346161542292e111, -1.7155244534032019e114,  7.4003425705269094e116,
   -3.2909225357054443e119,  1.5079831534164771e122, -7.1169879188254549e124,
    3.4580429141577772e127, -1.7290907606676748e130,  8.8936991695032969e132,
   -4.7038470619636015e135,  2.5571938231060206e138, -1.4284067500443528e141,
    8.1952152218313783e143, -4.8276485422727372e146,  2.9189612374770324e149,
   -1.8108932162568904e152,  1.1523577220021169e155, -7.5192311951981770e157,
    5.0294016576411050e160, -3.4473420444477677e163,  2.4207458645868515e166,
   -1.7409465920377677e169,  1.2819489863482243e172, -9.6624121108560918e174,
    7.4526910304300896e177, -5.8808393311674371e180,  4.7462718654907615e183,
   -3.9169132594772825e186,  3.3045071443226032e189, -2.8492890550994583e192,
    2.5103329345077587e195, -2.2593901995475253e198,  2.0769138004287608e201,
   -1.9494732174927259e204,  1.8680731471265914e207, -1.8270752662814577e210,
    1.8235386322595677e213, -1.8568690810125945e216,  1.9287189851195602e219,
   -2.0431170460286448e222,  2.2068411644527846e225, -2.4300821796490274e228,
    2.7274887879083470e231, -3.1197421573755085e234,  3.6358938724282600e237,
   -4.3168300030760883e240,  5.2204244879387200e243, -6.4292606949769305e246,
    8.0623033870130844e249, -1.0292714737903011e253,  1.3375329699780524e256,
   -1.7689480902797380e259,  2.3806479018092397e262, -3.2597127947194185e265,
    4.5404962371601213e268, -6.4328575193147851e271,  9.2687048675749311e274,
   -1.3579619500285181e278,  2.0227839736049322e281, -3.0629906992208336e284,
    4.7143085300742652e287, -7.3741045871355758e290,  1.1720962767050827e294,
   -1.8928866644685657e297,  3.1055517596048927e300, -5.1754977470366798e303,
    8.7601563446229215e306
)

# zeta((2n+1)/2) for n = -260,...,53
# generated by Table[Zeta[(2n+1)/2], {n,-260,53}]
const ZETA_HALF = (
     3.9827661181123220e307,  9.6433362448000074e305, -2.3439407584340338e304,
    -5.7193841298221739e302,  1.4010117087958981e301,  3.4453292304864785e299,
    -8.5059497050644373e297, -2.1082626513005684e296,  5.2461801640899847e294,
     1.3106450149434268e293, -3.2874353296689456e291, -8.2787837120957913e289,
     2.0932447557810041e288,  5.3140382601430007e286, -1.3545268607675730e285,
    -3.4666978695539325e283,  8.9087546496572775e281,  2.2987826004104489e280,
    -5.9561554883707278e278, -1.5496326563895657e277,  4.0484944441382918e275,
     1.0621060880003299e274, -2.7980752062011161e272, -7.4024526416784609e270,
     1.9666377029719586e269,  5.2470272271162727e267, -1.4058867539355314e266,
    -3.7830608119426697e264,  1.0223514885920455e263,  2.7747835213368118e261,
    -7.5637653153438135e259, -2.0707860172689682e258,  5.6941497934430261e256,
     1.5726328931446549e255, -4.3625359328008036e253, -1.2155486330384479e252,
     3.4020121653761278e250,  9.5639699563031302e248, -2.7007728318090256e247,
    -7.6611540292786790e245,  2.1830589765443757e244,  6.2490041394670281e242,
    -1.7969634322015399e241, -5.1911053952863064e239,  1.5065439791077875e238,
     4.3925266794199167e236, -1.2866694216095831e235, -3.7865959742644447e233,
     1.1196180795164108e232,  3.3261313791348173e230, -9.9281234257144221e228,
    -2.9775770518527122e227,  8.9729824379837270e225,  2.7170559718515575e224,
    -8.2671991095023042e222, -2.5277053029855494e221,  7.7662791298771289e219,
     2.3978855489090634e218, -7.4401774070141653e216, -2.3200006633528991e215,
     7.2703212372198653e213,  2.2897631867757178e212, -7.2478621723274042e210,
    -2.3058056258040641e209,  7.3729282591674948e207,  2.3695894889457989e206,
    -7.6547917023092180e204, -2.4856059304118601e203,  8.1129987851440235e201,
     2.6619046874142435e200, -8.7796537643431206e198, -2.9110391310947041e197,
     9.7032351708854510e195,  3.2515853150835024e194, -1.0954591462076980e193,
    -3.7104974728127777e191,  1.2636175178051074e190,  4.3267264423802673e188,
    -1.4896232334766630e187, -5.1567927348837000e185,  1.7950739248748865e184,
     6.2834440724652253e182, -2.2117671414340711e181, -7.8292635526541688e179,
     2.7871225903724263e178,  9.9783519710178565e176, -3.5928844982330007e175,
    -1.3011388524317517e174,  4.7393023305505450e172,  1.7363215609094552e171,
    -6.3986100410823544e169, -2.3718969083481073e168,  8.8445506259213734e166,
     3.3177283905310560e165, -1.2520061427385771e164, -4.7532245320565653e162,
     1.8155252608840958e161,  6.9769306691133557e159, -2.6976829704236109e158,
    -1.0495382045321495e157,  4.1086872436386578e155,  1.6185356314123265e154,
    -6.4161257403385267e152, -2.5596004432197954e151,  1.0276321978970592e150,
     4.1522852263739340e148, -1.6886457945353764e147, -6.9121006158014825e145,
     2.8478694446525145e144,  1.1811017459674170e143, -4.9309509212934426e141,
    -2.0723798246886023e140,  8.7684487982349044e138,  3.7351721122593935e137,
    -1.6019644051559838e136, -6.9178276378699404e134,  3.0080271952847941e133,
     1.3170726325442536e132, -5.8073062549406264e130, -2.5786841933098978e129,
     1.1531922160328110e128,  5.1940647943593014e126, -2.3563372996719944e125,
    -1.0767493745496944e124,  4.9563486078281678e122,  2.2982772509199958e121,
    -1.0736432605803427e120, -5.0531082846672608e118,  2.3961974135704737e117,
     1.1449241355169375e116, -5.5124678207780162e114, -2.6745835380550352e113,
     1.3077746295044196e112,  6.4446983036897226e110, -3.2010461415769541e109,
    -1.6026108433753167e108,  8.0879525335120284e106,  4.1148262772249950e105,
    -2.1105482454413522e104, -1.0914375083004741e103,  5.6910407600483292e101,
     2.9922898482088543e100, -1.5865916969694944e099, -8.4841273522483862e097,
     4.5757377102049363e096,  2.4891954935296295e095, -1.3659455503618347e094,
    -7.5616643281416861e092,  4.2232300626136748e091,  2.3798508590361764e090,
    -1.3532166471289430e089, -7.7648501869145187e087,  4.4965891803568636e086,
     2.6281770298084600e085, -1.5505467885783476e084, -9.2344765877630012e082,
     5.5523375708829064e081,  3.3706633667509829e080, -2.0661953698944638e079,
    -1.2790431911215158e078,  7.9964829708485572e076,  5.0495863629695904e075,
    -3.2210646541263895e074, -2.0757483187981977e073,  1.3515348536865869e072,
     8.8920878898687697e070, -5.9122366116161891e069, -3.9730137123717714e068,
     2.6987223116537662e067,  1.8531773089334069e066, -1.2866139711700539e065,
    -9.0324402230923603e063,  6.4127113782725226e062,  4.6048290184166022e061,
    -3.3448548012242072e060, -2.4580517592632789e059,  1.8277390175254400e058,
     1.3753320886556524e057, -1.0474504693253100e056, -8.0752458881756442e054,
     6.3028902256456618e053,  4.9814122337789498e052, -3.9871511027114064e051,
    -3.2325173194917671e050,  2.6549680166057794e049,  2.2094908652939287e048,
    -1.8634416833774931e047, -1.5929727082698584e046,  1.3805438228054136e045,
     1.2131765962753165e044, -1.0812217538625829e043, -9.7748440829817618e041,
     8.9660082806076385e040,  8.3459394804095439e039, -7.8855765891607938e038,
    -7.5643570936876974e037,  7.3687220696617393e036,  7.2911883843761565e035,
    -7.3299020365745174e034, -7.4886394763041847e033,  7.7772743021949564e032,
     8.2127824580599531e031, -8.8209289011187258e030, -9.6388749334234702e029,
     1.0719086258305834e029,  1.2135136087311320e028, -1.3990331883379682e027,
    -1.6430625744339688e026,  1.9664126907543198e025,  2.3990942381357321e024,
    -2.9849413203155724e023, -3.7888766558787984e022,  4.9084977597800870e021,
     6.4928423167524706e020, -8.7732755798824076e019, -1.2115190377880256e019,
     1.7106064309209495e018,  2.4708177455470930e017, -3.6528484130685489e016,
    -5.5304875851446423e015,  8.5800193423533586e014,  1.3648063662588848e014,
    -2.2273587812036406e013, -3.7319754581099058e012,  6.4242995521292075e011,
     1.1370440719795488e011, -2.0707995961810361e010, -3.8839455514548170e009,
     7.5087844999370095e008,  1.4977487127793475e008, -3.0854533472396764e007,
    -6.5716864915699575e006,  1.4488113705827264e006,  3.3102364874545032e005,
    -7.8486148569217687e004, -1.9338941988374620e004,  4.9595983150430436e003,
     1.3260458117490156e003, -3.7030187837547860e002, -1.0821747505877606e002,
     3.3168325785694608e001,  1.0687327069021994e001, -3.6297592997745741e000,
    -1.3032292507051140e000,  4.9627121991205761e-01,  2.0117404938422688e-01,
    -8.7175255906217251e-02, -4.0574967481194578e-02,  2.0396978715942792e-02,
     1.1146122473942814e-02, -6.6721722964666408e-03, -4.4160328730048898e-03,
     3.2690395726002200e-03,  2.7467679395368688e-03, -2.6714580198992246e-03,
    -3.0916692472158338e-03,  4.4410113354794320e-03,  8.5169287778503305e-03,
    -2.5485201889833036e-02, -2.0788622497735457e-01, -1.4603545088095868e000,
     2.6123753486854883e000,  1.3414872572509172e000,  1.1267338673170566e000,
     1.0547075107614543e000,  1.0252045799546857e000,  1.0120058998885248e000,
     1.0058267275365228e000,  1.0028592508824156e000,  1.0014125906121737e000,
     1.0007008426417362e000,  1.0003486558834918e000,  1.0001737517336432e000,
     1.0000866867274623e000,  1.0000432810242568e000,  1.0000216199042461e000,
     1.0000108031249002e000,  1.0000053992970512e000,  1.0000026988959441e000,
     1.0000013491977428e000,  1.0000006745156182e000,  1.0000003372300969e000,
     1.0000001686058207e000,  1.0000000842998368e000,  1.0000000421488945e000,
     1.0000000210741061e000,  1.0000000105369394e000,  1.0000000052684318e000,
     1.0000000026342033e000,  1.0000000013170974e000,  1.0000000006585473e000,
     1.0000000003292732e000,  1.0000000001646364e000,  1.0000000000823182e000,
     1.0000000000411591e000,  1.0000000000205795e000,  1.0000000000102898e000,
     1.0000000000051449e000,  1.0000000000025724e000,  1.0000000000012862e000,
     1.0000000000006431e000,  1.0000000000003216e000,  1.0000000000001608e000,
     1.0000000000000804e000,  1.0000000000000402e000,  1.0000000000000201e000,
     1.0000000000000100e000,  1.0000000000000050e000,  1.0000000000000025e000,
     1.0000000000000013e000,  1.0000000000000006e000,  1.0000000000000003e000,
     1.0000000000000002e000,  1.0000000000000001e000
)

# Riemann zeta function for integer arguments
function zeta(n::Integer)::Float64
    if n < 0
        if iseven(n)
            0.0
        elseif (1 - n)÷2 <= length(ZETA_NEG)
            ZETA_NEG[(1 - n)÷2]
        elseif iseven((1 - n)÷2)
            Inf
        else
            -Inf
        end
    elseif n == 0
        -0.5
    elseif n == 1
        Inf
    elseif n - 1 <= length(ZETA_POS)
        ZETA_POS[n - 1]
    else
        one(Float64)/(one(Float64) - 2.0^(-n))
    end
end

# Riemann zeta function for half integer arguments, zetahalf(n) = zeta(n/2)
function zetahalf(n::Integer)::Float64
    if iseven(n)
        zeta(n÷2)
    else
        i = (n + 1)÷2 + 260

        if i < 1
            if iseven(i÷2)
                -Inf
            else
                Inf
            end
        elseif i <= length(ZETA_HALF)
            ZETA_HALF[i]
        else
            one(Float64)
        end
    end
end

# Generalized zeta function for half integer arguments, zetahalf(k, z) = zeta(k/2, z)
function zetahalf(k::Integer, z::Complex)
    (z == one(z) || z == zero(z)) && return Complex(zetahalf(k))
    z == -one(z) && return Complex(one(z) + zetahalf(k))
    z == 2*one(z) && return Complex(zetahalf(k) - one(z))
    _zetahalf(k, z)
end

# Generalized zeta function, which is related to polygamma
# (at least for integer m > 0 and real(z) > 0) by:
#    polygamma(m, z) = (-1)^(m+1) * gamma(m+1) * zeta(m+1, z).
# Our algorithm for the polygamma is just the m-th derivative
# of our digamma approximation, and this derivative process yields
# a function of the form
#          (-1)^(m) * gamma(m+1) * (something)
# So identifying the (something) with the -zeta function, we get
# the zeta function for free and might as well export it, especially
# since this is a common generalization of the Riemann zeta function
# (which Julia already exports).   Note that this geneneralization
# is equivalent to Mathematica's Zeta[s,z], and is equivalent to the
# Hurwitz zeta function for real(z) > 0.

# Helper macro for polygamma(m, z):
#   Evaluate p[1]*c[1] + x*p[2]*c[2] + x^2*p[3]*c[3] + ...
#   where c[1] = m + 1
#         c[k] = c[k-1] * (2k+m-1)*(2k+m-2) / ((2k-1)*(2k-2)) = c[k-1] * d[k]
#         i.e. d[k] = c[k]/c[k-1] = (2k+m-1)*(2k+m-2) / ((2k-1)*(2k-2))
#   by a modified version of Horner's rule:
#      c[1] * (p[1] + d[2]*x * (p[2] + d[3]*x * (p[3] + ...))).
# The entries of p must be literal constants and there must be > 1 of them.
macro pg_horner(x, m, p...)
    k = length(p)
    me = esc(m)
    xe = esc(x)
    ex = :(($me + $(2k-1)) * ($me + $(2k-2)) * $(p[end]/((2k-1)*(2k-2))))
    for k = length(p)-1:-1:2
        cdiv = 1 / ((2k-1)*(2k-2))
        ex = :(($cdiv * ($me + $(2k-1)) * ($me + $(2k-2))) *
               ($(p[k]) + $xe * $ex))
    end
    :(($me + 1) * ($(p[1]) + $xe * $ex))
end

"""
    _zetahalf(n, z) = zeta(s=n/2, z)
Generalized zeta function for half-integer arguments ``s=n/2`` defined by
```math
\\zeta(s, z)=\\sum_{k=0}^\\infty \\frac{1}{((k+z)^2)^{s/2}},
```
where any term with ``k+z=0`` is excluded.  For ``\\Re z > 0``,
this definition is equivalent to the Hurwitz zeta function
``\\sum_{k=0}^\\infty (k+z)^{-s}``.
The Riemann zeta function is recovered as ``\\zeta(s)=\\zeta(s,1)``.
"""
function _zetahalf(k::Integer, z::Complex)
    s = k/2
    x = real(z)
    m = s - 1
    ζ = zero(z)

    # Algorithm is just the m-th derivative of digamma formula above,
    # with a modified cutoff of the final asymptotic expansion.

    # Note: we multiply by -(-1)^m m! in polygamma below, so this factor is
    #       pulled out of all of our derivatives.

    cutoff = 7 + real(m) + abs(imag(m)) # TODO: this cutoff is too conservative?
    if x < cutoff
        # shift using recurrence formula
        xf = floor(x)
        nx = Int(xf)
        n = ceil(Int, cutoff - nx)
        minus_s = -s
        if nx < 0 # x < 0
            # need to use (-z)^(-s) recurrence to be correct for real z < 0
            # [the general form of the recurrence term is (z^2)^(-s/2)]
            minus_z = -z
            ζ += minus_z^minus_s # ν = 0 term
            if xf != z
                ζ += (z - nx)^minus_s
                # real(z - nx) > 0, so use correct branch cut
                # otherwise, if xf==z, then the definition skips this term
            end
            # do loop in different order, depending on the sign of s,
            # so that we are looping from largest to smallest summands and
            # can halt the loop early if possible; see issue #15946
            # FIXME: still slow for small m, large Im(z)
            if real(s) > 0
                for ν in -nx-1:-1:1
                    ζₒ= ζ
                    ζ += (minus_z - ν)^minus_s
                    ζ == ζₒ && break # prevent long loop for large -x > 0
                end
            else
                for ν in 1:-nx-1
                    ζₒ= ζ
                    ζ += (minus_z - ν)^minus_s
                    ζ == ζₒ && break # prevent long loop for large -x > 0
                end
            end
        else # x ≥ 0 && z != 0
            ζ += z^minus_s
        end
        # loop order depends on sign of s, as above
        if real(s) > 0
            for ν in max(1,1-nx):n-1
                ζₒ= ζ
                ζ += (z + ν)^minus_s
                ζ == ζₒ && break # prevent long loop for large m
            end
        else
            for ν in n-1:-1:max(1,1-nx)
                ζₒ= ζ
                ζ += (z + ν)^minus_s
                ζ == ζₒ && break # prevent long loop for large m
            end
        end
        z += n
    end

    t = inv(z)
    w = t^m
    ζ += w * (inv(m) + 0.5*t)

    t *= t # 1/z^2
    ζ + w*t * @pg_horner(t,m,0.08333333333333333,-0.008333333333333333,0.003968253968253968,-0.004166666666666667,0.007575757575757576,-0.021092796092796094,0.08333333333333333,-0.4432598039215686,3.0539543302701198)
end
